#!/usr/bin/env node

let fs = require('q-io/fs');
let path = require('path');
let Q = require('q');
Q.longStackSupport = true;

let browser = require('browser');
let argv = require('minimist')(process.argv.slice(2));

function printVersion() {
  let packageJson = path.join(path.dirname(__dirname), 'package.json');

  return fs.read(packageJson)
    .then(packageJson => console.log(JSON.parse(packageJson).version));
}

function printHelp() {
console.log(`
usage: ap-io <command> [<args>]

commands:
  browser

    Manage the element documentation browser
    usage: ap-io browser [-g | --generate]
                         [-n | --new <new browser dir>]
                         [--baseurl <value>]
                         [-e]
                         [--verbose]
    args:
      -g | --generate
        Generate the documentation site in _site dir

      --baseurl <value>
        Provide the value for baseurl while generating the site

      -n | --new <new browser dir>
        Create the initial setup for documentation

      -e
        Add elements to the config. You can also create a new element

      --verbose
          Spit out as much as info as possible
args:
  -h | --help
      Print help

  -v | --version
      Print version
`);
}

function printSeedMessage(dir) {
console.log(`
You can now generate the site using following command.
    cd ${dir} && ap-io browser -g

Once you generate the site you can serve it locally using a server.
You can install a server globally if you don't have one using the command below.
    npm i -g http-server

To serve the site locally use the following command.
    http-server _site -o
`);
}

Q.spawn(function* () {
  let log = () => {};

  if (argv.verbose) {
    log = console.log.bind(console);
  }

  if (argv.h || argv.help) {
    printHelp();
  }

  else if (argv.v || argv.version) {
    printVersion();
  }

  else if (argv.n || argv.new) {
    let dir = argv.n || argv.new;
    yield browser.seedNew(log, dir);
    printSeedMessage(dir);
  }

  else if (argv.g || argv.generate) {
    // TODO: factor out the creation of config from arguments
    let argvConfig = {};

    if (argv.baseurl) {
      argvConfig.baseurl = argv.baseurl;
    }

    yield browser.generateSite(log, argvConfig);
  }

  else if (argv.e || argv.addElement) {
    yield browser.addElement(log);
  }

  else {
    printHelp();
  }
});
